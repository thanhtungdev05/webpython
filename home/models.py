from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from django.utils.text import slugify
from django.db import models
from django.contrib.auth.models import User
class Destination(models.Model):
    name = models.CharField(max_length=200, unique=True, verbose_name="T√™n ƒëi·ªÉm ƒë·∫øn")
    location = models.CharField(max_length=150, blank=True, verbose_name="V·ªã tr√≠")
    description = models.TextField(blank=True, verbose_name="M√¥ t·∫£")
    category = models.CharField(max_length=50, blank=True, verbose_name="Ph√¢n lo·∫°i")  # e.g. Bi·ªÉn, N√∫i, VƒÉn h√≥a
    image = models.ImageField(upload_to='destinations/', null=True, blank=True, verbose_name="·∫¢nh ƒë·∫°i di·ªán")
    featured = models.BooleanField(default=False, verbose_name="N·ªïi b·∫≠t")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['name']
        verbose_name = "ƒêi·ªÉm ƒë·∫øn"
        verbose_name_plural = "Danh s√°ch ƒëi·ªÉm ƒë·∫øn"

    def __str__(self):
        return self.name

    @property
    def image_url(self):
        """Tr·∫£ v·ªÅ link ·∫£nh, n·∫øu kh√¥ng c√≥ th√¨ d√πng ·∫£nh m·∫∑c ƒë·ªãnh."""
        if self.image and hasattr(self.image, 'url'):
            return self.image.url
        return "https://images.unsplash.com/photo-1507525428034-b723cf961d3e?q=80&w=1200&auto=format&fit=crop"


# üöå Tour du l·ªãch
class Tour(models.Model):
    destination = models.ForeignKey(
        Destination,
        on_delete=models.CASCADE,
        related_name='tours',
        verbose_name="ƒêi·ªÉm ƒë·∫øn"
    )
    title = models.CharField(max_length=250, verbose_name="T√™n tour")
    price = models.DecimalField(max_digits=12, decimal_places=0, null=True, blank=True, verbose_name="Gi√° (VNƒê)")
    duration = models.CharField(max_length=100, blank=True, verbose_name="Th·ªùi l∆∞·ª£ng")
    schedule = models.TextField(blank=True, verbose_name="L·ªãch tr√¨nh")
    image = models.ImageField(upload_to='tours/', null=True, blank=True, verbose_name="·∫¢nh tour")
    featured = models.BooleanField(default=False, verbose_name="Tour n·ªïi b·∫≠t")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = "Tour du l·ªãch"
        verbose_name_plural = "Danh s√°ch tour"

    def __str__(self):
        return self.title

    @property
    def image_url(self):
        """∆Øu ti√™n ·∫£nh tour, n·∫øu kh√¥ng c√≥ th√¨ d√πng ·∫£nh ƒëi·ªÉm ƒë·∫øn."""
        if self.image and hasattr(self.image, 'url'):
            return self.image.url
        return self.destination.image_url

    @property
    def average_rating(self):
        """T√≠nh ƒëi·ªÉm trung b√¨nh t·ª´ c√°c ƒë√°nh gi√°."""
        reviews = self.reviews.all()
        if reviews.exists():
            return round(sum(r.rating for r in reviews) / reviews.count(), 1)
        return 0



# ‚≠ê ƒê√°nh gi√° tour
class Review(models.Model):
    tour = models.ForeignKey(
        Tour,
        on_delete=models.CASCADE,
        related_name='reviews',
        verbose_name="Tour"
    )
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        verbose_name="Ng∆∞·ªùi d√πng"
    )
    rating = models.PositiveSmallIntegerField(default=5, verbose_name="S·ªë sao (1‚Äì5)")
    comment = models.TextField(blank=True, verbose_name="Nh·∫≠n x√©t")
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = "ƒê√°nh gi√°"
        verbose_name_plural = "Danh s√°ch ƒë√°nh gi√°"
        unique_together = ('tour', 'user')  # M·ªôt user ch·ªâ ƒë√°nh gi√° 1 tour m·ªôt l·∫ßn

    def __str__(self):
        return f"{self.user.username} ‚Äì {self.tour.title} ({self.rating}‚≠ê)"

# üìã ƒê∆°n ƒë·∫∑t tour
class Booking(models.Model):
    tour = models.ForeignKey('Tour', on_delete=models.CASCADE, related_name='bookings')
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    full_name = models.CharField(max_length=200)
    email = models.EmailField()
    phone = models.CharField(max_length=30, blank=True)
    pax = models.PositiveSmallIntegerField(default=1)  # s·ªë l∆∞·ª£ng ng∆∞·ªùi
    booking_date = models.DateField(default=timezone.now)
    status = models.CharField(max_length=50, default='Pending')  # Pending, Confirmed, Cancelled
    created_at = models.DateTimeField(auto_now_add=True)
     # Th√¥ng tin kh√°ch h√†ng b·ªï sung
    address = models.CharField(max_length=255, blank=True, null=True)
    birth_date = models.DateField(blank=True, null=True)
    cccd = models.CharField(max_length=20, blank=True, null=True)
    def __str__(self):
        return f"Booking {self.id} - {self.full_name}"

    @property
    def total_price(self):
        if self.tour.price:
            return self.pax * self.tour.price
        return 0

class News(models.Model):
    title = models.CharField(max_length=255)
    slug = models.SlugField(unique=True, blank=True)
    summary = models.TextField()
    content = models.TextField()
    image = models.ImageField(upload_to='news/', blank=True, null=True)
    published_at = models.DateTimeField(auto_now_add=True)
    is_published = models.BooleanField(default=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    phone = models.CharField(max_length=30, blank=True)
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)
    bio = models.TextField(blank=True)

    def __str__(self):
        return self.user.username
